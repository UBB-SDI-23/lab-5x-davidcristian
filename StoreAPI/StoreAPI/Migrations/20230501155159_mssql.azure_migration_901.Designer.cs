// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreAPI.Models;

#nullable disable

namespace StoreAPI.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20230501155159_mssql.azure_migration_901")]
    partial class mssqlazure_migration_901
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StoreAPI.Models.Store", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("StoreAPI.Models.StoreEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EmploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<long?>("StoreEmployeeRoleId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreEmployeeRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreEmployees");
                });

            modelBuilder.Entity("StoreAPI.Models.StoreEmployeeRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleLevel")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StoreEmployeeRoles");
                });

            modelBuilder.Entity("StoreAPI.Models.StoreShift", b =>
                {
                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreEmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("StoreId", "StoreEmployeeId");

                    b.HasIndex("StoreEmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreShifts");
                });

            modelBuilder.Entity("StoreAPI.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StoreAPI.Models.UserProfile", b =>
                {
                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("StoreAPI.Models.Store", b =>
                {
                    b.HasOne("StoreAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreAPI.Models.StoreEmployee", b =>
                {
                    b.HasOne("StoreAPI.Models.StoreEmployeeRole", "StoreEmployeeRole")
                        .WithMany("StoreEmployees")
                        .HasForeignKey("StoreEmployeeRoleId")
                        .IsRequired();

                    b.HasOne("StoreAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("StoreEmployeeRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreAPI.Models.StoreEmployeeRole", b =>
                {
                    b.HasOne("StoreAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreAPI.Models.StoreShift", b =>
                {
                    b.HasOne("StoreAPI.Models.StoreEmployee", "StoreEmployee")
                        .WithMany("StoreShifts")
                        .HasForeignKey("StoreEmployeeId")
                        .IsRequired();

                    b.HasOne("StoreAPI.Models.Store", "Store")
                        .WithMany("StoreShifts")
                        .HasForeignKey("StoreId")
                        .IsRequired();

                    b.HasOne("StoreAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreEmployee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreAPI.Models.UserProfile", b =>
                {
                    b.HasOne("StoreAPI.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("StoreAPI.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreAPI.Models.Store", b =>
                {
                    b.Navigation("StoreShifts");
                });

            modelBuilder.Entity("StoreAPI.Models.StoreEmployee", b =>
                {
                    b.Navigation("StoreShifts");
                });

            modelBuilder.Entity("StoreAPI.Models.StoreEmployeeRole", b =>
                {
                    b.Navigation("StoreEmployees");
                });

            modelBuilder.Entity("StoreAPI.Models.User", b =>
                {
                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
